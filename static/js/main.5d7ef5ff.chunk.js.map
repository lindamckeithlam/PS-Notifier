{"version":3,"sources":["actions.js","reducer.js","store.js","DrawerContainer.jsx","NavBar.jsx","App.js","serviceWorker.js","index.js","initialState.js"],"names":["SET_NOTIFICATIONS","LAST_CHANGELOG_DATE","reducer","state","arguments","length","undefined","initialState","action","type","Object","objectSpread","notifications","value","configureStore","preloadedState","createStore","composeWithDevTools","applyMiddleware","thunk","DrawerContainer","classes","this","props","react_default","a","createElement","Drawer","anchor","open","onClose","className","root","react_gist_es","id","React","Component","withStyles","theme","width","display","flexDirection","NavBar","drawerOpen","clearNotifications","_this2","grow","AppBar","position","Toolbar","style","backgroundColor","color","boxShadow","Typography","title","variant","noWrap","notificationSection","IconButton","edge","aria-haspopup","onClick","setState","Badge","badgeContent","Avatar","alt","src","src_DrawerContainer","NavBarContainer","connect","dispatch","flexGrow","defineProperty","breakpoints","up","App","fetchChangelog","react_redux_es","store","src_NavBar","href","target","rel","_ref","asyncToGenerator","regenerator_default","mark","_callee","getState","res","content","changelogDates","lastChangeSeen","wrap","_context","prev","next","axios","get","sent","match","localStorage","getItem","indexOf","dateString","setItem","t0","console","error","stop","_x","_x2","apply","Boolean","window","location","hostname","ReactDOM","render","react_router_dom","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.5d7ef5ff.chunk.js","sourcesContent":["import axios from \"axios\";\nimport get from \"lodash/get\";\n\nexport const SET_NOTIFICATIONS = \"SET_NOTIFICATIONS\";\n\nconst LAST_CHANGELOG_DATE = \"LAST_CHANGELOG_DATE\";\n\n// Check user's localStorage for the last date they viewed the changelog\nexport function getLastChangeSeen() {\n  return localStorage.getItem(LAST_CHANGELOG_DATE);\n}\n\n// Sets user's localStorage with date of last changelog update\nexport function setLastChangeSeen(dateString) {\n  return localStorage.setItem(LAST_CHANGELOG_DATE, dateString);\n}\n\n// sets notifications to 0 in state\nexport function clearNotifications() {\n  return dispatch => dispatch({ type: SET_NOTIFICATIONS, value: 0 });\n}\n\nexport function getChangelogHTML() {\n  return async (dispatch, getState) => {\n    try {\n      const res = await axios.get(\n        \"https://api.github.com/gists/11af66c06ead3f46d205bd432aab0358\"\n      );\n      // get content string from gist response\n      const content = get(\n        res,\n        \"data.files['ps-notifier-changelog.md'].content\",\n        \"\"\n      );\n\n      // get array of dates from changelog\n      const changelogDates = getDates(content);\n      // local storage date of last change user has seen\n      const lastChangeSeen = getLastChangeSeen();\n\n      const notifications = lastChangeSeen\n        ? changelogDates.indexOf(lastChangeSeen)\n        : changelogDates.length;\n\n      dispatch({ type: SET_NOTIFICATIONS, value: notifications });\n\n      // always set seen date to most recent update\n      setLastChangeSeen(changelogDates[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n\n// takes in the changelog markdown text, and returns array of dates\nfunction getDates(markdown) {\n  const regex = /\\d{4}-\\d{2}-\\d{2}/g;\n  return markdown.match(regex);\n}\n","import initialState from \"./initialState\";\nimport { SET_NOTIFICATIONS } from \"./actions.js\";\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_NOTIFICATIONS:\n      return { ...state, notifications: action.value };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import thunk from \"redux-thunk\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport reducer from \"./reducer.js\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst configureStore = (preloadedState = {}) =>\n  createStore(\n    reducer,\n    preloadedState,\n    composeWithDevTools(applyMiddleware(thunk))\n  );\n\nexport default configureStore;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Gist from \"react-gist\";\n\nconst styles = theme => ({\n  root: {\n    width: \"50vw\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  }\n});\n\nclass DrawerContainer extends React.Component {\n  render() {\n    const classes = this.props.classes;\n    return (\n      <Drawer\n        anchor=\"right\"\n        open={this.props.open}\n        onClose={this.props.onClose}\n      >\n        <div className={classes.root}>\n          {/* Gist Link */}\n          <Gist id=\"11af66c06ead3f46d205bd432aab0358\" />\n        </div>\n      </Drawer>\n    );\n  }\n}\n\nexport default withStyles(styles)(DrawerContainer);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Badge from \"@material-ui/core/Badge\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nimport DrawerContainer from \"./DrawerContainer\";\nimport { clearNotifications } from \"./actions.js\";\n\nconst styles = theme => ({\n  grow: {\n    flexGrow: 1\n  },\n  title: {\n    display: \"none\",\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"block\"\n    }\n  },\n  notificationSection: {\n    display: \"none\",\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"flex\"\n    }\n  }\n});\n\nconst msp = state => {\n  return {\n    notifications: state.notifications\n  };\n};\n\nconst mdp = dispatch => ({\n  clearNotifications: () => dispatch(clearNotifications())\n});\n\nclass NavBar extends React.Component {\n  state = {\n    drawerOpen: false\n  };\n\n  clearNotifications() {\n    this.props.clearNotifications();\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return (\n      <div className={classes.grow}>\n        <AppBar position=\"static\">\n          <Toolbar\n            style={{\n              backgroundColor: \"black\",\n              color: \"hsla(0,0%,100%,.9)\",\n              boxShadow: \"0 1px 0 rgba(0,0,0,.05)\"\n            }}\n          >\n            {/* App Name */}\n            <Typography className={classes.title} variant=\"h6\" noWrap>\n              PS-Notifier\n            </Typography>\n\n            <div className={classes.grow} />\n\n            <div className={classes.notificationSection}>\n              <IconButton\n                edge=\"end\"\n                aria-haspopup=\"true\"\n                onClick={() => this.setState({ drawerOpen: true })}\n                color=\"inherit\"\n              >\n                <Badge\n                  badgeContent={this.props.notifications}\n                  color=\"secondary\"\n                >\n                  <Avatar\n                    alt=\"Profile Picture\"\n                    src=\"https://avatars3.githubusercontent.com/u/35122889?s=400&v=4\"\n                  />\n                </Badge>\n              </IconButton>\n            </div>\n          </Toolbar>\n        </AppBar>\n\n        {/* Notification Drawer */}\n        <DrawerContainer\n          open={this.state.drawerOpen}\n          onClose={() => {\n            this.props.clearNotifications();\n            this.setState({ drawerOpen: false });\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nconst NavBarContainer = connect(\n  msp,\n  mdp\n)(withStyles(styles)(NavBar));\n\nexport default NavBarContainer;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Provider } from \"react-redux\";\nimport \"./App.css\";\nimport NavBar from \"./NavBar\";\nimport { getChangelogHTML } from \"./actions\";\n\nconst mdp = dispatch => ({\n  fetchChangelog: () => dispatch(getChangelogHTML())\n});\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.fetchChangelog();\n  }\n  render() {\n    return (\n      <Provider store={this.props.store}>\n        <div className=\"App\">\n          <NavBar />\n          <header className=\"App-header\">\n            <img\n              src={\n                \"https://screamless-seed.s3.us-east-2.amazonaws.com/panda.png\"\n              }\n              className=\"App-logo\"\n              alt=\"logo\"\n            />\n\n            <div className=\"personal-links\">\n              <a\n                href=\"https://angel.co/linda-mckeith-lam\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <i className=\"fab fa-angellist\" />\n              </a>\n              <a\n                href=\"https://www.linkedin.com/in/lindamckeithlam\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <i className=\"fab fa-linkedin-in\" />\n              </a>\n              <a\n                href=\"https://github.com/lindamckeithlam/PS-Notifier\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <i className=\"fab fa-github\" />\n              </a>\n            </div>\n          </header>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  mdp\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport configureStore from \"./store\";\nimport initialState from \"./initialState\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nconst store = configureStore(initialState);\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <App store={store} />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\n  notifications: 0\n};\n"],"sourceRoot":""}