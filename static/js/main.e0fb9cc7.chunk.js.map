{"version":3,"sources":["actions.js","reducer.js","store.js","DrawerContainer.jsx","NavBar.jsx","App.js","serviceWorker.js","index.js","initialState.js"],"names":["SET_NOTIFICATIONS","LAST_CHANGELOG_DATE","reducer","state","arguments","length","undefined","initialState","action","type","Object","objectSpread","notifications","value","configureStore","preloadedState","createStore","composeWithDevTools","applyMiddleware","thunk","DrawerContainer","classes","this","props","react_default","a","createElement","Drawer","anchor","open","onClose","className","root","react_gist_es","id","React","Component","withStyles","theme","width","NavBar","drawerOpen","clearNotifications","_this2","grow","AppBar","position","Toolbar","Typography","title","variant","noWrap","notificationSection","IconButton","edge","aria-haspopup","onClick","setState","color","Badge","badgeContent","Avatar","alt","src","src_DrawerContainer","NavBarContainer","connect","dispatch","flexGrow","defineProperty","display","breakpoints","up","App","fetchChangelog","react_redux_es","store","src_NavBar","href","target","rel","_ref","asyncToGenerator","regenerator_default","mark","_callee","getState","res","content","changelogDates","lastChangeSeen","wrap","_context","prev","next","axios","get","sent","match","localStorage","getItem","indexOf","dateString","setItem","t0","console","error","stop","_x","_x2","apply","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.e0fb9cc7.chunk.js","sourcesContent":["import axios from \"axios\";\nimport get from \"lodash/get\";\n\nexport const SET_NOTIFICATIONS = \"SET_NOTIFICATIONS\";\n\nconst LAST_CHANGELOG_DATE = \"LAST_CHANGELOG_DATE\";\n\n// Check user's localStorage for the last date they viewed the changelog\nexport function getLastChangeSeen() {\n  return localStorage.getItem(LAST_CHANGELOG_DATE);\n}\n\n// Sets user's localStorage with date of last changelog update\nexport function setLastChangeSeen(dateString) {\n  return localStorage.setItem(LAST_CHANGELOG_DATE, dateString);\n}\n\n// sets notifications to 0 in state\nexport function clearNotifications() {\n  return dispatch => dispatch({ type: SET_NOTIFICATIONS, value: 0 });\n}\n\nexport function getChangelogHTML() {\n  return async (dispatch, getState) => {\n    try {\n      const res = await axios.get(\n        \"https://api.github.com/gists/11af66c06ead3f46d205bd432aab0358\"\n      );\n      // get content string from gist response\n      const content = get(\n        res,\n        \"data.files['ps-notifier-changelog.md'].content\",\n        \"\"\n      );\n\n      // get array of dates from changelog\n      const changelogDates = getDates(content);\n      // local storage date of last change user has seen\n      const lastChangeSeen = getLastChangeSeen();\n\n      const notifications = lastChangeSeen\n        ? changelogDates.indexOf(lastChangeSeen)\n        : changelogDates.length;\n\n      dispatch({ type: SET_NOTIFICATIONS, value: notifications });\n\n      // always set seen date to most recent update\n      setLastChangeSeen(changelogDates[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n\n// takes in the changelog markdown text, and returns array of dates\nfunction getDates(markdown) {\n  const regex = /\\d{4}-\\d{2}-\\d{2}/g;\n  return markdown.match(regex);\n}\n","import initialState from \"./initialState\";\nimport { SET_NOTIFICATIONS } from \"./actions.js\";\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_NOTIFICATIONS:\n      return { ...state, notifications: action.value };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import thunk from \"redux-thunk\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport reducer from \"./reducer.js\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst configureStore = (preloadedState = {}) =>\n  createStore(\n    reducer,\n    preloadedState,\n    composeWithDevTools(applyMiddleware(thunk))\n  );\n\nexport default configureStore;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Gist from \"react-gist\";\n\nconst styles = theme => ({\n  root: {\n    width: \"50vw\"\n  }\n});\n\nclass DrawerContainer extends React.Component {\n  render() {\n    const classes = this.props.classes;\n    return (\n      <Drawer\n        anchor=\"right\"\n        open={this.props.open}\n        onClose={this.props.onClose}\n      >\n        <div className={classes.root}>\n          {/* Gist Link */}\n          <Gist id=\"11af66c06ead3f46d205bd432aab0358\" />\n        </div>\n      </Drawer>\n    );\n  }\n}\n\nexport default withStyles(styles)(DrawerContainer);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Badge from \"@material-ui/core/Badge\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nimport DrawerContainer from \"./DrawerContainer\";\nimport { clearNotifications } from \"./actions.js\";\n\nconst styles = theme => ({\n  grow: {\n    flexGrow: 1\n  },\n  title: {\n    display: \"none\",\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"block\"\n    }\n  },\n  notificationSection: {\n    display: \"none\",\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"flex\"\n    }\n  }\n});\n\nconst msp = state => {\n  return {\n    notifications: state.notifications\n  };\n};\n\nconst mdp = dispatch => ({\n  clearNotifications: () => dispatch(clearNotifications())\n});\n\nclass NavBar extends React.Component {\n  state = {\n    drawerOpen: false\n  };\n\n  clearNotifications() {\n    this.props.clearNotifications();\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return (\n      <div className={classes.grow}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            {/* App Name */}\n            <Typography className={classes.title} variant=\"h6\" noWrap>\n              PS-Notifier\n            </Typography>\n\n            <div className={classes.grow} />\n\n            <div className={classes.notificationSection}>\n              <IconButton\n                edge=\"end\"\n                aria-haspopup=\"true\"\n                onClick={() => this.setState({ drawerOpen: true })}\n                color=\"inherit\"\n              >\n                <Badge\n                  badgeContent={this.props.notifications}\n                  color=\"secondary\"\n                >\n                  <Avatar\n                    alt=\"Profile Picture\"\n                    src=\"https://avatars3.githubusercontent.com/u/35122889?s=400&v=4\"\n                  />\n                </Badge>\n              </IconButton>\n            </div>\n          </Toolbar>\n        </AppBar>\n\n        {/* Notification Drawer */}\n        <DrawerContainer\n          open={this.state.drawerOpen}\n          onClose={() => {\n            this.props.clearNotifications();\n            this.setState({ drawerOpen: false });\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nconst NavBarContainer = connect(\n  msp,\n  mdp\n)(withStyles(styles)(NavBar));\n\nexport default NavBarContainer;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Provider } from \"react-redux\";\n\nimport \"./App.css\";\nimport NavBar from \"./NavBar\";\nimport { getChangelogHTML } from \"./actions\";\n\nconst mdp = dispatch => ({\n  fetchChangelog: () => dispatch(getChangelogHTML())\n});\n\nclass App extends React.Component {\n  componentDidMount() {\n    // on mount, check last time user viewed changelog to render the appropriate\n    // notification number\n    this.props.fetchChangelog();\n  }\n  render() {\n    return (\n      <Provider store={this.props.store}>\n        <div className=\"App\">\n          <NavBar />\n          <header className=\"App-header\">\n            <img\n              src={\n                \"https://images.vectorhq.com/images/previews/634/kung-fu-panda-psd-435887.png\"\n              }\n              className=\"App-logo\"\n              alt=\"logo\"\n            />\n\n            <a\n              className=\"App-link\"\n              href=\"https://reactjs.org\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              See More on Github\n            </a>\n          </header>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  mdp\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport configureStore from \"./store\";\nimport initialState from \"./initialState\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = configureStore(initialState);\n\nReactDOM.render(<App store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\n  notifications: 0\n};\n"],"sourceRoot":""}